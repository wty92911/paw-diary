// @ts-nocheck - Block type system refactor in progress
 
 
/* TODO: Refactor to move hooks outside Controller render function */

import React from 'react';
import { Controller } from 'react-hook-form';
import { Button } from '../../ui/button';
import { Badge } from '../../ui/badge';
import { Play, Pause, Square, RotateCcw, Timer } from 'lucide-react';
import { type BlockProps } from '../../../lib/types/activities';
import { Field } from './Field';

// Timer value interface
interface TimerValue {
  duration: number; // Total duration in seconds
  startTime?: Date; // When timer was started
  endTime?: Date; // When timer was stopped
  isRunning: boolean;
  currentTime: number; // Current elapsed time in seconds
  laps?: TimerLap[]; // For activities that need lap tracking
}

// Timer lap interface
interface TimerLap {
  lapNumber: number;
  startTime: Date;
  endTime: Date;
  duration: number; // Duration in seconds
}

// Timer block configuration
interface TimerBlockConfig {
  showLaps?: boolean;
  autoStart?: boolean;
  maxDuration?: number; // in seconds
  showMilliseconds?: boolean;
  enableLaps?: boolean;
  hint?: string;
  presetDurations?: number[];
}

// TimerBlock component for duration tracking activities
const TimerBlock: React.FC<BlockProps<TimerBlockConfig>> = ({
  control,
  name,
  label = 'Timer',
  required = false,
  config = {},
}) => {
  const fieldName = name;

  return (
    <Controller
      control={control}
      name={fieldName}
      rules={{ required: required ? `${label} is required` : false }}
      render={({ field, fieldState: { error } }) => {
        const currentValue: TimerValue | undefined = field.value;

        // Timer interval ref
        const intervalRef = React.useRef<ReturnType<typeof setInterval> | null>(null);

        // Initialize default value
        React.useEffect(() => {
          if (!currentValue) {
            field.onChange({
              duration: 0,
              isRunning: false,
              currentTime: 0,
              laps: [],
            });
          }
        }, [currentValue, field]);

        // Timer tick effect
        React.useEffect(() => {
          if (currentValue?.isRunning) {
            intervalRef.current = setInterval(() => {
              const now = new Date();
              const startTime = currentValue.startTime || now;
              const elapsed = Math.floor((now.getTime() - startTime.getTime()) / 1000);
              
              const updatedValue: TimerValue = {
                ...currentValue,
                currentTime: elapsed,
              };
              field.onChange(updatedValue);
            }, 1000);
          } else {
            if (intervalRef.current) {
              clearInterval(intervalRef.current);
              intervalRef.current = null;
            }
          }

          return () => {
            if (intervalRef.current) {
              clearInterval(intervalRef.current);
              intervalRef.current = null;
            }
          };
        }, [currentValue?.isRunning, currentValue?.startTime, field]);

        // Start timer
        const handleStart = React.useCallback(() => {
          if (!currentValue) return;

          const now = new Date();
          const updatedValue: TimerValue = {
            ...currentValue,
            isRunning: true,
            startTime: currentValue.startTime || now,
          };
          field.onChange(updatedValue);
        }, [currentValue, field]);

        // Pause timer
        const handlePause = React.useCallback(() => {
          if (!currentValue) return;

          const updatedValue: TimerValue = {
            ...currentValue,
            isRunning: false,
            duration: currentValue.currentTime,
          };
          field.onChange(updatedValue);
        }, [currentValue, field]);

        // Stop timer
        const handleStop = React.useCallback(() => {
          if (!currentValue) return;

          const now = new Date();
          const updatedValue: TimerValue = {
            ...currentValue,
            isRunning: false,
            endTime: now,
            duration: currentValue.currentTime,
          };
          field.onChange(updatedValue);
        }, [currentValue, field]);

        // Reset timer
        const handleReset = React.useCallback(() => {
          if (!currentValue) return;

          const updatedValue: TimerValue = {
            duration: 0,
            isRunning: false,
            currentTime: 0,
            laps: [],
          };
          field.onChange(updatedValue);
        }, [currentValue, field]);

        // Add lap (for activities that need lap tracking)
        const handleAddLap = React.useCallback(() => {
          if (!currentValue || !currentValue.isRunning) return;

          const now = new Date();
          const previousLap = currentValue.laps?.[currentValue.laps.length - 1];
          const lapStartTime = previousLap ? previousLap.endTime : currentValue.startTime || now;
          
          const newLap: TimerLap = {
            lapNumber: (currentValue.laps?.length || 0) + 1,
            startTime: lapStartTime,
            endTime: now,
            duration: Math.floor((now.getTime() - lapStartTime.getTime()) / 1000),
          };

          const updatedValue: TimerValue = {
            ...currentValue,
            laps: [...(currentValue.laps || []), newLap],
          };
          field.onChange(updatedValue);
        }, [currentValue, field]);

        // Format time display
        const formatTime = (seconds: number): string => {
          const hours = Math.floor(seconds / 3600);
          const minutes = Math.floor((seconds % 3600) / 60);
          const secs = seconds % 60;

          if (hours > 0) {
            return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
          }
          return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        };

        // Get timer status
        const getTimerStatus = (): { label: string; color: string } => {
          if (!currentValue) return { label: 'Ready', color: 'text-muted-foreground' };
          
          if (currentValue.isRunning) {
            return { label: 'Running', color: 'text-green-600' };
          } else if (currentValue.duration > 0) {
            return { label: 'Stopped', color: 'text-blue-600' };
          }
          return { label: 'Ready', color: 'text-muted-foreground' };
        };

        // 如果没有值，显示一个空的组件而不是返回null
        if (!currentValue) {
          return (
            <Field
              label={label}
              required={required}
              error={error?.message}
              blockType="timer"
              id={`timer-${fieldName}`}
            >
              <div className="text-center text-muted-foreground p-4">
                Timer not initialized
              </div>
            </Field>
          );
        }

        const displayTime = currentValue.isRunning ? currentValue.currentTime : currentValue.duration;
        const status = getTimerStatus();
        const canAddLaps = config?.enableLaps && currentValue.isRunning;

        return (
          <Field
            label={label}
            required={required}
            error={error?.message}
            hint={config?.hint || 'Track the duration of this activity'}
            blockType="timer"
            id={`timer-${fieldName}`}
          >
            <div className="space-y-4">
              {/* Timer display */}
              <div className="text-center space-y-3">
                <div className="relative">
                  {/* Main timer display */}
                  <div className="text-4xl font-mono font-bold text-primary">
                    {formatTime(displayTime)}
                  </div>
                  
                  {/* Status indicator */}
                  <div className={`text-sm ${status.color} flex items-center justify-center gap-1 mt-1`}>
                    <Timer className="w-3 h-3" />
                    {status.label}
                  </div>
                </div>

                {/* Timer controls */}
                <div className="flex items-center justify-center gap-2">
                  {!currentValue.isRunning ? (
                    <Button
                type="button"
                onClick={handleStart}
                className="flex items-center gap-2"
                size="lg"
              >
                <Play className="w-4 h-4" />
                {currentValue.duration > 0 ? 'Resume' : 'Start'}
              </Button>
            ) : (
              <Button
                type="button"
                onClick={handlePause}
                variant="secondary"
                className="flex items-center gap-2"
                size="lg"
              >
                <Pause className="w-4 h-4" />
                Pause
              </Button>
            )}

            {currentValue.duration > 0 && (
              <Button
                type="button"
                onClick={handleStop}
                variant="outline"
                className="flex items-center gap-2"
              >
                <Square className="w-4 h-4" />
                Stop
              </Button>
            )}

            <Button
              type="button"
              onClick={handleReset}
              variant="outline"
              className="flex items-center gap-2"
              disabled={currentValue.isRunning}
            >
              <RotateCcw className="w-4 h-4" />
              Reset
            </Button>
          </div>

          {/* Lap button */}
          {canAddLaps && (
            <Button
              type="button"
              onClick={handleAddLap}
              variant="outline"
              size="sm"
              className="flex items-center gap-2"
            >
              <Timer className="w-3 h-3" />
              Add Lap
            </Button>
          )}
        </div>

        {/* Activity summary */}
        {(currentValue.startTime || currentValue.endTime) && (
          <div className="bg-muted/30 rounded-lg p-3 space-y-2">
            <div className="text-sm font-medium">Activity Summary</div>
            
            {currentValue.startTime && (
              <div className="text-xs text-muted-foreground">
                Started: {currentValue.startTime.toLocaleTimeString()}
              </div>
            )}
            
            {currentValue.endTime && (
              <div className="text-xs text-muted-foreground">
                Ended: {currentValue.endTime.toLocaleTimeString()}
              </div>
            )}
            
            <div className="flex items-center gap-2">
              <Badge variant="outline" className="text-xs">
                Duration: {formatTime(currentValue.duration)}
              </Badge>
              {currentValue.laps && currentValue.laps.length > 0 && (
                <Badge variant="secondary" className="text-xs">
                  {currentValue.laps.length} Lap{currentValue.laps.length !== 1 ? 's' : ''}
                </Badge>
              )}
            </div>
          </div>
        )}

        {/* Laps list */}
        {currentValue.laps && currentValue.laps.length > 0 && (
          <div className="space-y-2">
            <div className="text-sm font-medium">Laps</div>
            <div className="max-h-32 overflow-y-auto space-y-1">
              {currentValue.laps.map((lap) => (
                <div key={lap.lapNumber} className="flex items-center justify-between text-xs bg-muted/20 rounded p-2">
                  <span className="font-medium">Lap {lap.lapNumber}</span>
                  <div className="flex items-center gap-2">
                    <span className="font-mono">{formatTime(lap.duration)}</span>
                    <span className="text-muted-foreground">
                      {lap.endTime.toLocaleTimeString()}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Presets for common activity durations */}
        {config?.presetDurations && (
          <div className="space-y-2">
            <div className="text-sm font-medium">Quick Durations</div>
            <div className="flex flex-wrap gap-2">
              {config.presetDurations.map((preset: number) => (
                <Button
                  key={preset}
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    const updatedValue: TimerValue = {
                      ...currentValue,
                      duration: preset,
                      currentTime: preset,
                    };
                    field.onChange(updatedValue);
                  }}
                  className="text-xs"
                  disabled={currentValue.isRunning}
                >
                  {formatTime(preset)}
                </Button>
              ))}
            </div>
          </div>
        )}
            </div>
          </Field>
        );
      }}
    />
  );
};

export default TimerBlock;